#file: noinspection SpellCheckingInspection
openapi: 3.0.3
info:
  title: Honor Education API
  description: |-
    
    Create users, courses, and enrollments.  This is largely based on the [OneRoster Implementation](https://www.imsglobal.org/oneroster-v11-final-specification).
    
    ### Authentication Information
    
    Contact support and obtain a client-id and client-secret.  Once you have a client ID and client secret, you will be able to request an
    access token and refresh token which will allow you to make requests

    ```
    curl -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d 'client_id=THE_CLIENT_ID&client_secret=THE_CLIENT_SECRET&scope=https://api.honor.education/api.oneroster&grant_type=client_credentials' https://auth.honor.education/oauth2/token
    
    ```    

    Returns

    ```
    {
      "access_token":"eyJraWQiOiJYZTFmTzhCS1F5aGxrZmxaUXBcL3dQMXZ4blBy",
      "expires_in":3600,
      "token_type":"Bearer"
    }

    ```

    Once you have an access token you will be able to make requests to the API.  For example,

    ```
    curl http://api.honor.education/1/courses -H 'Authorization: Bearer eyJraWQiOiJYZTFmTzhCS1F5aGxrZmxaUXBcL3dQMXZ4blBy'
    ```

  contact:
    name: Support
    email: support@honor.education
  version: '0.1'
servers:
  - url: https://api.honor.education/1
tags:
  - name: Academic Sessions
    description: Academic session creation and retrieval
  - name: Courses
    description: Course creation and retrieval
  - name: Enrollment
    description: Enrollment
  - name: Users
    description: User creation and retrieval
paths:
  /academic-sessions:
    get:
      tags:
        - Academic Sessions
      summary: Get academic sessions for an organization
      operationId: getAllAcademicSessions
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
          allowEmptyValue: false
          style: form
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
          allowEmptyValue: false
          style: form
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: "The total number of items returned the in the query (not just limited to current page)"
              example: 138
            Link:
              description: |-
                The prev, next, last, first links.   For example: `<https://api.honor.education/1/academic-sessions?limit=10>; rel="first", <https://api.honor.education/1/academic-sessions?limit=10;offset=40>; rel="next",  <https://api.honor.education/1/academic-sessions?limit=10&offset=20>; rel="prev", <https://api.honor.education/1/academic-sessions?limit=10&offset=120>; rel="last",`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicSessionsEnvelope'
    post:
      tags:
        - Academic Sessions
      summary: Create a new academic session
      description: Create a new academic session
      operationId: createAcademicSession
      requestBody:
        description: Create a new academic session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcademicSession'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicSessionEnvelope'
        '400':
          description: Invalid parameter specified
        '422':
          description: Validation exception
      security:
        - oneroster_auth:
            - api:readwrite
  /academic-sessions/{sourcedId}:
    get:
      tags:
        - Academic Sessions
      summary: Get academic session by sourced ID
      description: Get academic session by sourced ID
      operationId: getAcademicSession
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the academic session
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicSessionEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
    put:
      tags:
        - Academic Sessions
      summary: Update an academic session
      description: Update an academic session
      operationId: putAcademicSession
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the academic session
          required: true
      requestBody:
        description: An academic session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcademicSession'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcademicSessionEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
    delete:
      tags:
        - Academic Sessions
      summary: Delete an academic session
      description: Delete an academic session
      operationId: deleteAcademicSession
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the academic session
          required: true
      responses:
        '204':
          description: Successful
  /courses:
    get:
      tags:
        - Courses
      summary: Get the courses for an organization
      operationId: getAllCourses
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
          allowEmptyValue: false
          style: form
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
          allowEmptyValue: false
          style: form
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: "The total number of items returned the in the query (not just limited to current page)"
              example: 138
            Link:
              description: |-
                The prev, next, last, first links.   For example: `<https://api.honor.education/1/courses?limit=10>; rel="first", <https://api.honor.education/1/courses?limit=10;offset=40>; rel="next",  <https://api.honor.education/1/courses?limit=10&offset=20>; rel="prev", <https://api.honor.education/1/courses?limit=10&offset=120>; rel="last",`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursesEnvelope'
    post:
      tags:
        - Courses
      summary: Create a course
      description: Creates a course
      operationId: createCourse
      requestBody:
        description: |-
          Creates a course. The sourcedId must be unique within your organization.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseEnvelope'
        '400':
          description: Invalid parameter specified
        '422':
          description: Validation exception
      security:
        - oneroster_auth:
            - api:readwrite
  /courses/{sourcedId}:
    delete:
      tags:
        - Courses
      summary: removes a course
      description: Removes a course
      operationId: deleteCourse
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the course
          required: true
      responses:
        '204':
          description: Successful
    get:
      tags:
        - Courses
      summary: Get the course by sourced ID
      description: Get the course by sourced ID
      operationId: getCourse
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the course
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
    put:
      tags:
        - Courses
      summary: Update a course
      description: Update a course by sourcedId
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the course
          required: true
      requestBody:
        description: A course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
  /enrollments:
    get:
      tags:
        - Enrollment
      summary: Gets all the enrollments for the organization
      description: Gets all the enrollments for the organization
      operationId: getAllEnrollments
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
          allowEmptyValue: false
          style: form
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
          allowEmptyValue: false
          style: form
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: "The total number of items returned the in the query (not just limited to current page)"
              example: 138
            Link:
              description: |-
                The prev, next, last, first links.   For example: `<https://api.honor.education/1/users?limit=10>; rel="first", <https://api.honor.education/1/users?limit=10;offset=40>; rel="next",  <https://api.honor.education/1/enrollments?limit=10&offset=20>; rel="prev", <https://api.honor.education/1/enrollments?limit=10&offset=120>; rel="last",`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentsEnvelope'
    post:
      tags:
        - Enrollment
      summary: Creates a new enrollment
      description: Creates a new enrollment. Because we do not yet expose an API for class and section, the 
        `class/sourcedId` field in the body can be any of these (evaluated in this order) - section Id, 
        section sourced Id,  class Id, class sourced Id, course sourced ID, course ID.  When section Ids are not 
        specified, the default section is selected for that class or course.
      operationId: createEnrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentEnvelope'
        '400':
          description: Invalid parameter specified
        '422':
          description: Validation exception
      security:
        - oneroster_auth:
            - api:readwrite
  /enrollments/{sourcedId}:
    delete:
      tags:
        - Enrollment
      summary: removes an enrollment
      description: Removes an enrollment
      operationId: deleteEnrollment
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the enrollment
          required: true
      responses:
        '204':
          description: Successful
      security:
        - oneroster_auth:
            - api:readwrite
    get:
      tags:
        - Enrollment
      summary: Get an enrollment
      description: Retrieves a enrollment by sourcedId
      operationId: findEnrollment
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the enrollment
          required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
  /users:
    get:
      tags:
        - Users
      summary: Get the users for an organization
      description: Lists the users for an organization or a filtered subset
      operationId: getAllUsers
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
          allowEmptyValue: false
          style: form
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
          allowEmptyValue: false
          style: form
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: "The total number of items returned the in the query (not just limited to current page)"
              example: 138
            Link:
              description: |-
                The prev, next, last, first links.   For example: `<https://api.honor.education/1/users?limit=10>; rel="first", <https://api.honor.education/1/users?limit=10;offset=40>; rel="next",  <https://api.honor.education/1/users?limit=10&offset=20>; rel="prev", <https://api.honor.education/1/users?limit=10&offset=120>; rel="last",`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersEnvelope'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user in honor's system.
      operationId: createUser
      requestBody:
        description: Create an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '400':
          description: Invalid parameter specified
        '422':
          description: Validation exception
      security:
        - oneroster_auth:
            - api:readwrite
  /users/{sourcedId}:
    delete:
      tags:
        - Users
      summary: Remove a user
      description: Removes a user by sourcedId
      operationId: deleteUser
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the user
          required: true
      responses:
        '204':
          description: Successful
    get:
      tags:
        - Users
      summary: Get a user
      description: Retrieves a user by sourcedId
      operationId: findUser
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the user
          required: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite
    put:
      tags:
        - Users
      summary: Update a user
      description: Update a user by sourcedId
      operationId: patchUser
      parameters:
        - name: sourcedId
          in: path
          description: The sourced ID of the user
          required: true
      requestBody:
        description: A user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEnvelope'
        '404':
          description: Not Found
      security:
        - oneroster_auth:
            - api:readwrite

components:
  schemas:
    AcademicSessionEnvelope:
      required:
        - academicSession
      type: object
      properties:
        academicSession:
          $ref: '#/components/schemas/AcademicSession'
    AcademicSessionsEnvelope:
      required:
        - academicSessions
      type: object
      properties:
        academicSessions:
          type: array
          items:
            $ref: "#/components/schemas/AcademicSession"
    AcademicSession:
      allOf:
        - $ref: '#/components/schemas/OneRosterResource'
        - type: object
          properties:
            title:
              type: string
              example: Spring 2024
              nullable: false
            startDate:
              type: string
              format: date
              nullable: true
            endDate:
              type: string
              format: date
              nullable: true
            schoolYear:
              type: string
              example: AY 2024-2025
              nullable: true
            type:
              type: string
              enum:
                - gradingPeriod
                - schoolYear
                - semester
                - term
              example: semester
              nullable: true
    Course:
      allOf:
        - $ref: '#/components/schemas/OneRosterResource'
        - $ref: '#/components/schemas/PatchableCourse'
    CourseEnvelope:
      required:
        - courses
      type: object
      properties:
        course:
          $ref: "#/components/schemas/Course"
    CoursesEnvelope:
      required:
        - courses
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: "#/components/schemas/Course"
    EnrollmentEnvelope:
      required:
        - enrollment
      type: object
      properties:
        enrollment:
          $ref: "#/components/schemas/Enrollment"
    EnrollmentsEnvelope:
      required:
        - enrollments
      type: object
      properties:
        enrollments:
          type: array
          items:
            $ref: "#/components/schemas/Enrollment"
    Enrollment:
      allOf:
        - $ref: '#/components/schemas/OneRosterResource'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/OneRosterResource'
            class:
              $ref: '#/components/schemas/OneRosterResource'
            role:
              $ref: '#/components/schemas/Role'
    IdRef:
      type: object
      properties:
        type:
          type: string
          example: "HonorId"
        identifier:
          type: string
          example: "3738aff4-6fb6-42a1-ae70-bed16b713fc6"
      readOnly: true
    OneRosterMetadataDType:
      type: object
      properties: {}
      additionalProperties: true
      example:
        foo: bar
      readOnly: true
    OneRosterResource:
      type: object
      properties:
        sourcedId:
          type: string
          description: the external object identifier
          example: "b18c1010-4065-4a5a-891b-6162137c7929"
        honorId:
          type: string
          nullable: true
          readOnly: true
          description: internal ID of the honor resource
          example: "ba2a8aa8-ff02-4743-8eda-9f3502b550e8"
        status:
          type: string
          enum:
            - active
            - tobedeleted
          readOnly: true
          example: "active"
        dateLastModified:
          type: string
          format: date-time
          readOnly: true
        metadata:
          $ref: "#/components/schemas/OneRosterMetadataDType"
    PatchableCourse:
      type: object
      properties:
        title:
          type: string
          example: Introduction to Biology
          nullable: false
        courseCode:
          type: string
          example: BIO-101
          nullable: true
        description:
          type: string
          example: A survey of basic biology from the cellular level to plant and animal biology
        notes:
          type: string
          example: Some course notes
    PatchableUser:
      type: object
      properties:
        enabledUser:
          type: boolean
        givenName:
          type: string
          example: "Sally"
        middleName:
          type: string
          nullable: true
          example: null
        familyName:
          type: string
          example: "Smith"
        email:
          type: string
          example: "sallysmith@example.com"
        sms:
          type: string
        authProviderType:
          type: string
          example: null
          enum:
            - google
            - saml
            - password
          nullable: true
          description: "Will default to tenant default if left unspecified"
        defaultRole:
          type: string
          enum:
            - student
            - teacher
    Role:
      type: string
      enum:
        - student
        - teacher
        - proctor
        - administrator
    User:
      allOf:
        - $ref: '#/components/schemas/OneRosterResource'
        - $ref: "#/components/schemas/PatchableUser"
        - type: object
          properties:
            userIds:
              readOnly: true
              type: array
              items:
                $ref: "#/components/schemas/IdRef"
    UserEnvelope:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    UsersEnvelope:
      required:
        - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
  securitySchemes:
    oneroster_auth:
      type: oauth2
      flows:
        clientCredentials:
          scopes:
            api:readwrite: allow read/write access to apis
            authorizationUrl: https://not-specified-yet
